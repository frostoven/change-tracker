/**
 * Declaration file generated by dts-gen
 * https://stackoverflow.com/questions/12687779/how-do-you-produce-a-d-ts-typings-definition-file-from-an-existing-javascript
 *
 * Created like so:
 * npm i change-tracker
 * dts-gen change-tracker
 */

export = change_tracker;

declare class change_tracker {
  /**
   * Static function that waits for all specified ChangeTracker instances to
   * perform at least one getOnce. Returns a ChangeTracker instance to keep
   * track of progress completion; this returned ChangeTracker will provide an
   * an {error,results} style response with an array containing the results of
   * the trackers you provide, in order. The error object will be null unless a
   * timeout it set.
   *
   * You may specify a timeout. If the timeout is reached and everything has
   * not been resolved, then the returned ChangeTracker instance will emit an
   * error with partial results. If everything eventually completes, the
   * returned tracker will emit again, this time with full results.
   *
   * @param {Array<change_tracker>} trackers
   * @param {number} [timeoutMs]
   */
  static waitForAll(trackers: Array<change_tracker>, timeoutMs?): change_tracker;

  /**
   * @param {any} [initialValue] - The initial value. Be careful with this if
   *   heavily relying on getNext() immediately after initialisation.
   * @param {object|undefined} [Options]
   * @param {boolean} Options.forceSetFlag If true, makes the ChangeTracker
   *   believe a value has been set at least once, even if it hasn't been set
   *   at all. The purpose of this flag is to make getOnce() and getEveryChange()
   *   immediately send `undefined` if the value has not yet been set. Default
   *   is false, which means those functions will only call back after
   *   setValue() has been called at least once.
   */
  constructor(initialValue?, { forceSetFlag }?);

  /**
   * Using this, you'll be notified every time the value changes. If the value
   * has already been set, you'll be notified immediately.
   * @param {function} callback
   */
  getEveryChange(callback: Function): void;

  /**
   * Notified you the next time the value changes. Does not return the current
   * value.
   * @param {function} callback
   */
  getNext(callback: Function): void;

  /**
   * Using this, you'll be notified the first time the value changes. If the
   * value has already been set, you'll be notified immediately.
   * @param {function} callback
   */
  getOnce(callback: Function): void;

  /**
   * Removes a listener that was set using getEveryChange().
   * @param {function} listener - Function originally passed to getEveryChange().
   * @return {boolean} Returns true if removed, false if not found.
   */
  removeGetEveryChangeListener(listener: Function): boolean;

  /**
   * Removes a listener that was set using getEveryChange().
   * @param {function} listener - Function originally passed to getEveryChange().
   * @return {boolean} Returns true if removed, false if not found.
   */
  removeGetNextListener(listener: Function): boolean;

  /**
   * Removes a listener that was set using getOnce().
   * @param {function} listener - Function originally passed to getOnce().
   * @return {boolean} Returns true if removed, false if not found.
   */
  removeGetOnceListener(listener: Function): boolean;

  /**
   * Sets the value, but does not notify anything listening for changes. This
   * should not be done in most cases, and is likely to create state corruption
   * bugs if used frivolously.
   * @param {*} value
   */
  setSilent(value: any): void;

  /**
   * Sets the value, then notifies those waiting for it.
   * @param {*} value
   */
  setValue(value: any): void;
}
